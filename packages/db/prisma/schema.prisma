// SQLite-compatible schema for development/testing
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Users & Authentication (simplified for SQLite)
model User {
  id         String    @id @default(cuid())
  email      String?   @unique
  phone      String?   @unique
  name       String?
  role       String    @default("guest")
  kycStatus  String    @default("not_started")
  verifiedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  profile          Profile?
  visaApplications VisaApplication[]
  reminders        Reminder[]
  documentVault    DocumentVaultItem[]
  properties       Property[]
  bookings         Booking[]
  stripeAccount    StripeConnectAccount?
  driverProfile    DriverProfile?
  messages         Message[]
  Driver           Driver[]
  DriverSession    DriverSession[]
  SavedDriver      SavedDriver[]
}

model Profile {
  id          String    @id @default(cuid())
  userId      String    @unique
  dateOfBirth DateTime?
  nationality String?
  documentId  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Immigration Models
model VisaApplication {
  id               String    @id @default(cuid())
  userId           String
  visaPathId       String
  nationality      String
  destination      String
  purpose          String // tourism, business, study, work, remote_work, family, other
  stayLengthDays   Int
  hasDependents    Boolean   @default(false)
  currentResidence String?
  status           String    @default("draft") // draft, submitted, processing, approved, rejected, withdrawn
  submittedAt      DateTime?
  approvedAt       DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  checklist ChecklistItem[]
  reminders Reminder[]

  @@index([userId])
  @@index([status])
}

model ChecklistItem {
  id                   String    @id @default(cuid())
  applicationId        String
  title                String
  description          String?
  priority             String // critical, high, medium, low
  completed            Boolean   @default(false)
  completedAt          DateTime?
  estimatedTimeMinutes Int?
  dependencies         String? // JSON string of dependency IDs
  formId               String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relations
  application VisaApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@index([applicationId])
  @@index([completed])
}

model DocumentVaultItem {
  id          String    @id @default(cuid())
  userId      String
  type        String // passport, photo, bank_statement, proof_of_funds, employment_letter, invitation_letter, other
  title       String
  description String?
  filePath    String?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
}

model Reminder {
  id            String    @id @default(cuid())
  userId        String
  applicationId String?
  type          String // ninety_day_report, tm30, visa_renewal, extension, appointment, document_expiry
  title         String
  description   String?
  dueDate       DateTime
  completed     Boolean   @default(false)
  completedAt   DateTime?
  recurrence    String // once, daily, weekly, monthly, quarterly, yearly
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  application VisaApplication? @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([dueDate])
  @@index([completed])
}

// Booking & Payment Models
// SQLite doesn't support enums, using string types instead

model Property {
  id                    String   @id @default(cuid())
  title                 String
  description           String
  city                  String
  country               String
  address               String?
  latitude              Float?
  longitude             Float?
  maxGuests             Int
  bedrooms              Int
  bathrooms             Float
  hasDedicatedWorkspace Boolean  @default(false)
  wifiSpeed             Int?
  hasKitchen            Boolean  @default(false)
  hasLaundry            Boolean  @default(false)
  monthlyPrice          Decimal
  nightlyPrice          Decimal
  available             Boolean  @default(true)
  trustScore            Float?   @default(0.0)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  host   User   @relation(fields: [hostId], references: [id], onDelete: Cascade)
  hostId String
  units  Unit[]
}

model Unit {
  id         String   @id @default(cuid())
  propertyId String
  name       String?
  sleeps     Int
  bedrooms   Int
  bathrooms  Float
  sqft       Int?
  floor      Int?
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  property     Property       @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  bookings     Booking[]
  Availability Availability[]
  RatePlan     RatePlan[]
}

model Booking {
  id        String   @id @default(cuid())
  unitId    String
  userId    String
  checkin   DateTime
  checkout  DateTime
  status    String   @default("pending") // pending, confirmed, cancelled, completed
  currency  String   @default("USD")
  subtotal  Decimal
  fees      Decimal  @default(0)
  taxes     Decimal  @default(0)
  deposit   Decimal?
  total     Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  unit     Unit      @relation(fields: [unitId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments Payment[]
}

model Payment {
  id                  String    @id @default(cuid())
  bookingId           String
  stripePaymentIntent String?   @unique
  stripeCustomerId    String?
  amount              Decimal
  currency            String    @default("USD")
  status              String    @default("pending") // pending, succeeded, failed, refunded, requires_action
  paymentMethod       String? // card, bank_transfer, etc.
  refundedAmount      Decimal?  @default(0)
  refundedAt          DateTime?
  metadata            String? // JSON string for additional data
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relations
  booking  Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  payout   Payout? @relation(fields: [payoutId], references: [id])
  payoutId String?

  @@index([stripePaymentIntent])
  @@index([status])
  @@index([createdAt])
}

model Payout {
  id              String    @id @default(cuid())
  stripePayoutId  String?   @unique
  stripeAccountId String // Connected account ID
  amount          Decimal
  currency        String    @default("USD")
  status          String    @default("pending") // pending, paid, failed, in_transit
  arrivalDate     DateTime?
  failureCode     String?
  failureMessage  String?
  metadata        String? // JSON string for additional data
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  payments Payment[]

  @@index([stripePayoutId])
  @@index([stripeAccountId])
  @@index([status])
  @@index([arrivalDate])
}

model WebhookLog {
  id            String    @id @default(cuid())
  eventType     String
  stripeEventId String?   @unique
  source        String // stripe, other
  payload       String // JSON string of the full webhook payload
  status        String    @default("received") // received, processing, processed, failed
  errorMessage  String?
  processedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([eventType])
  @@index([stripeEventId])
  @@index([source])
  @@index([status])
  @@index([createdAt])
}

// Stripe Connect account information for hosts
model StripeConnectAccount {
  id               String    @id @default(cuid())
  userId           String    @unique
  stripeAccountId  String    @unique
  email            String
  country          String    @default("US")
  chargesEnabled   Boolean   @default(false)
  payoutsEnabled   Boolean   @default(false)
  requirements     String? // JSON string of account requirements
  detailsSubmitted Boolean   @default(false)
  onboardedAt      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([stripeAccountId])
  @@index([userId])
  @@index([chargesEnabled])
  @@index([payoutsEnabled])
}

// Driver & Vehicle Models
model DriverProfile {
  id              String    @id @default(cuid())
  userId          String    @unique
  licenseNumber   String?
  licenseCountry  String?
  licenseExpiry   DateTime?
  yearsExperience Int?      @default(0)
  languages       String? // JSON array of languages
  specialties     String? // JSON array of specialties
  rating          Float?    @default(0.0)
  totalTrips      Int       @default(0)
  isVerified      Boolean   @default(false)
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicles  Vehicle[]
  presences DriverPresence[]
  messages  Message[]

  @@index([userId])
  @@index([isActive])
  @@index([isVerified])
}

model DriverPresence {
  id         String    @id @default(cuid())
  driverId   String
  isOnline   Boolean   @default(false)
  latitude   Float?
  longitude  Float?
  lastPingAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  driver DriverProfile @relation(fields: [driverId], references: [id], onDelete: Cascade)

  @@index([driverId])
  @@index([isOnline])
  @@index([lastPingAt])
}

model Vehicle {
  id           String   @id @default(cuid())
  driverId     String
  make         String
  model        String
  year         Int
  color        String
  licensePlate String
  capacity     Int      @default(4)
  vehicleType  String // sedan, suv, van, motorcycle
  isActive     Boolean  @default(true)
  isVerified   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  driver DriverProfile @relation(fields: [driverId], references: [id], onDelete: Cascade)

  @@index([driverId])
  @@index([isActive])
  @@index([vehicleType])
}

model Message {
  id          String    @id @default(cuid())
  driverId    String
  userId      String
  content     String
  messageType String    @default("text") // text, image, location, system
  isRead      Boolean   @default(false)
  readAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  driver DriverProfile @relation(fields: [driverId], references: [id], onDelete: Cascade)
  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([driverId])
  @@index([userId])
  @@index([createdAt])
  @@index([isRead])
}

// Visa Rule Engine Models
model VisaCountry {
  id        String   @id @default(cuid())
  code      String   @unique // ISO country code
  name      String
  region    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  visaRulesFrom VisaRule[] @relation("FromCountry")
  visaRulesTo   VisaRule[] @relation("ToCountry")

  @@index([code])
  @@index([region])
  @@index([isActive])
}

model VisaRule {
  id                 String   @id @default(cuid())
  fromCountryId      String // Source country
  toCountryId        String // Destination country
  purpose            String // tourism, business, study, work, remote_work, transit
  visaRequired       Boolean  @default(true)
  visaOnArrival      Boolean  @default(false)
  eVisaAvailable     Boolean  @default(false)
  maxStayDays        Int?
  processingTimeDays Int?
  costMin            Decimal?
  costMax            Decimal?
  currency           String   @default("USD")
  requirements       String? // JSON array of requirement strings
  notes              String?
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  fromCountry VisaCountry @relation("FromCountry", fields: [fromCountryId], references: [id], onDelete: Cascade)
  toCountry   VisaCountry @relation("ToCountry", fields: [toCountryId], references: [id], onDelete: Cascade)

  @@unique([fromCountryId, toCountryId, purpose])
  @@index([fromCountryId])
  @@index([toCountryId])
  @@index([purpose])
  @@index([visaRequired])
  @@index([isActive])
}

model Driver {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  country   String
  city      String
  isActive  Boolean  @default(true)
  rating    Float?   @default(0.0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String?
  sessions DriverSession[]
  savedBy  SavedDriver[]
}

model DriverSession {
  id           String   @id @default(cuid())
  driverId     String
  userId       String
  status       String   @default("offline") // offline, online, busy, offline
  lastActiveAt DateTime @default(now())
  location     String? // Current location
  eta          String? // Estimated time of arrival
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  driver Driver @relation(fields: [driverId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SavedDriver {
  id        String   @id @default(cuid())
  userId    String
  driverId  String
  name      String
  phone     String?
  rating    Float?   @default(0.0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  driver Driver @relation(fields: [driverId], references: [id], onDelete: Cascade)
}

model Availability {
  id        String   @id @default(cuid())
  unitId    String
  date      DateTime @unique
  isBlocked Boolean  @default(false)
  price     Decimal?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  unit Unit @relation(fields: [unitId], references: [id], onDelete: Cascade)
}

model RatePlan {
  id                 String   @id @default(cuid())
  unitId             String
  name               String
  baseNightly        Decimal
  minNights          Int      @default(1)
  maxNights          Int?
  weeklyDiscountPct  Int      @default(0)
  monthlyDiscountPct Int      @default(0)
  currency           String   @default("USD")
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  unit Unit @relation(fields: [unitId], references: [id], onDelete: Cascade)
}
